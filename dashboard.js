// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkAuth() {
    const userData = sessionStorage.getItem('currentUser');
    if (!userData) {
        window.location.href = 'index.html';
        return null;
    }
    return JSON.parse(userData);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadUserData() {
    const user = checkAuth();
    if (!user) return;

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    document.getElementById('userAvatar').textContent = 
        user.firstName.charAt(0) + user.lastName.charAt(0);
    document.getElementById('welcomeTitle').textContent = 
        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.firstName}!`;
    document.getElementById('userEmail').textContent = user.email;
    
    document.getElementById('profileName').textContent = 
        `${user.firstName} ${user.lastName}`;
    document.getElementById('profileEmail').textContent = user.email;
    document.getElementById('profileLogin').textContent = user.login;
    document.getElementById('profileDate').textContent = 
        new Date(user.registeredAt).toLocaleDateString('ru-RU');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loadUserCourses(user);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadUserCourses(user) {
    const container = document.getElementById('userCoursesContainer');
    
    if (!user.courses || user.courses.length === 0) {
        container.innerHTML = `
            <div class="empty-courses-state">
                <div class="empty-icon">üìö</div>
                <h3>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤</h3>
                <p>–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ</p>
                <a href="courses.html" class="browse-courses-btn">–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ç–∞–ª–æ–≥—É</a>
            </div>
        `;
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö
    const userCourseData = getUserCourseData(user.courses);
    
    container.innerHTML = `
        <div class="user-courses-grid">
            ${userCourseData.map(course => createCourseCard(course)).join('')}
        </div>
    `;
}

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserCourseData(courseIds) {
    const coursesData = {
        'fullstack': {
            id: 'fullstack',
            title: 'Fullstack-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
            icon: 'üíª',
            description: 'JavaScript, React, Node.js, MongoDB',
            progress: 30,
            lessonsTotal: 120,
            lessonsCompleted: 36,
            nextLesson: 'React Components',
            lastActivity: '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥'
        },
        'mobile': {
            id: 'mobile',
            title: '–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
            icon: 'üì±',
            description: 'React Native, iOS & Android',
            progress: 15,
            lessonsTotal: 100,
            lessonsCompleted: 15,
            nextLesson: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è',
            lastActivity: '–≤—á–µ—Ä–∞'
        },
        'design': {
            id: 'design',
            title: 'UI/UX –î–∏–∑–∞–π–Ω',
            icon: 'üé®',
            description: 'Figma, Adobe XD, –ü—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ',
            progress: 0,
            lessonsTotal: 80,
            lessonsCompleted: 0,
            nextLesson: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ –¥–∏–∑–∞–π–Ω',
            lastActivity: '–µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç'
        },
        'python': {
            id: 'python',
            title: 'Python & Data Science',
            icon: 'üêç',
            description: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
            progress: 0,
            lessonsTotal: 140,
            lessonsCompleted: 0,
            nextLesson: '–û—Å–Ω–æ–≤—ã Python',
            lastActivity: '–µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç'
        },
        'java': {
            id: 'java',
            title: 'Java —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
            icon: '‚òï',
            description: 'Enterprise —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ Java',
            progress: 0,
            lessonsTotal: 110,
            lessonsCompleted: 0,
            nextLesson: 'Java Core',
            lastActivity: '–µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç'
        }
    };

    return courseIds.map(courseId => coursesData[courseId] || {
        id: courseId,
        title: courseId,
        icon: 'üìö',
        description: '–ö—É—Ä—Å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
        progress: 0,
        lessonsTotal: 0,
        lessonsCompleted: 0,
        nextLesson: '–°–∫–æ—Ä–æ',
        lastActivity: '–æ–∂–∏–¥–∞–µ—Ç—Å—è'
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫—É—Ä—Å–∞
function createCourseCard(course) {
    const progressWidth = course.progress > 0 ? course.progress : 0;
    
    return `
        <div class="user-course-card" data-course-id="${course.id}">
            <div class="course-card-header">
                <div class="course-icon">${course.icon}</div>
                <div class="course-status ${course.progress > 0 ? 'active' : 'not-started'}">
                    ${course.progress > 0 ? '–í –ø—Ä–æ—Ü–µ—Å—Å–µ' : '–ù–µ –Ω–∞—á–∞—Ç'}
                </div>
            </div>
            
            <div class="course-card-content">
                <h3>${course.title}</h3>
                <p>${course.description}</p>
                
                <div class="course-progress">
                    <div class="progress-info">
                        <span>–ü—Ä–æ–≥—Ä–µ—Å—Å:</span>
                        <span class="progress-percent">${course.progress}%</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${progressWidth}%"></div>
                    </div>
                    <div class="progress-stats">
                        <span>${course.lessonsCompleted}/${course.lessonsTotal} —É—Ä–æ–∫–æ–≤</span>
                    </div>
                </div>
                
                <div class="course-next-lesson">
                    <strong>–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫:</strong> ${course.nextLesson}
                </div>
                
                <div class="course-last-activity">
                    –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${course.lastActivity}
                </div>
            </div>
            
            <div class="course-card-actions">
                ${course.progress > 0 ? `
                    <button class="continue-btn" onclick="continueCourse('${course.id}')">
                        üéØ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                    </button>
                ` : `
                    <button class="start-btn" onclick="startCourse('${course.id}')">
                        üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ
                    </button>
                `}
                <button class="course-details-btn" onclick="showCourseDetails('${course.id}')">
                    ‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                </button>
            </div>
        </div>
    `;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫—É—Ä—Å–æ–≤
function continueCourse(courseId) {
    alert(`–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫—É—Ä—Å "${courseId}"! üéØ`);
}

function startCourse(courseId) {
    alert(`–ù–∞—á–∏–Ω–∞–µ–º –∫—É—Ä—Å "${courseId}"! üöÄ`);
}

function showCourseDetails(courseId) {
    alert(`–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∫—É—Ä—Å–∞ "${courseId}" ‚ÑπÔ∏è`);
}

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
function logout() {
    sessionStorage.removeItem('currentUser');
    window.location.href = 'index.html';
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    loadUserData();
});
// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ dashboard.js

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
function showDeleteAccountModal() {
    const user = checkAuth();
    if (!user) return;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    document.getElementById('confirmEmail').value = '';
    document.getElementById('confirmDeleteBtn').disabled = true;
    document.getElementById('deleteStatus').innerHTML = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email
    document.getElementById('confirmEmail').addEventListener('input', validateDeleteEmail);
    
    document.getElementById('deleteAccountModal').style.display = 'block';
    disableBodyScroll();
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
function closeDeleteAccountModal() {
    document.getElementById('deleteAccountModal').style.display = 'none';
    enableBodyScroll();
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è email –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
function validateDeleteEmail() {
    const user = checkAuth();
    const confirmEmail = document.getElementById('confirmEmail').value.trim();
    const confirmBtn = document.getElementById('confirmDeleteBtn');
    const input = document.getElementById('confirmEmail');
    
    if (confirmEmail === user.email) {
        confirmBtn.disabled = false;
        input.classList.remove('error');
    } else {
        confirmBtn.disabled = true;
        if (confirmEmail && confirmEmail !== user.email) {
            input.classList.add('error');
        } else {
            input.classList.remove('error');
        }
    }
}
// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ dashboard.js (–µ—Å–ª–∏ –∏—Ö —Ç–∞–º –Ω–µ—Ç)
function getUsers() {
    return JSON.parse(localStorage.getItem('learnpro_users')) || [];
}

function saveUsers(users) {
    localStorage.setItem('learnpro_users', JSON.stringify(users));
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
function deleteAccount() {
    const user = checkAuth();
    const confirmEmail = document.getElementById('confirmEmail').value.trim();
    const statusElement = document.getElementById('deleteStatus');
    const confirmBtn = document.getElementById('confirmDeleteBtn');
    
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–æ–±–∞–≤—å—Ç–µ –∏—Ö)
    const getUsers = () => JSON.parse(localStorage.getItem('learnpro_users')) || [];
    const saveUsers = (users) => localStorage.setItem('learnpro_users', JSON.stringify(users));
    
    if (confirmEmail !== user.email) {
        showDeleteError(statusElement, 'Email –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç');
        document.getElementById('confirmEmail').classList.add('shake');
        setTimeout(() => {
            document.getElementById('confirmEmail').classList.remove('shake');
        }, 500);
        return;
    }
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    confirmBtn.disabled = true;
    confirmBtn.innerHTML = '‚è≥ –£–¥–∞–ª—è–µ–º...';
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    setTimeout(() => {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const users = getUsers();
            
            // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userIndex = users.findIndex(u => u.email === user.email);
            
            if (userIndex !== -1) {
                // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–∞—Å—Å–∏–≤–∞
                users.splice(userIndex, 1);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
                saveUsers(users);
                
                // –£–¥–∞–ª—è–µ–º –∏–∑ sessionStorage
                sessionStorage.removeItem('currentUser');
                
                showDeleteSuccess(statusElement, '‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
                
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                setTimeout(() => {
                    window.location.href = 'index.html';
                }, 2000);
            } else {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
            showDeleteError(statusElement, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞');
            confirmBtn.disabled = false;
            confirmBtn.innerHTML = '–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç';
        }
    }, 1500);
}
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
function showDeleteError(element, message) {
    element.className = 'status-message status-error';
    element.innerHTML = message;
}

function showDeleteSuccess(element, message) {
    element.className = 'status-message status-success';
    element.innerHTML = message;
}

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
function disableBodyScroll() {
    document.body.style.overflow = 'hidden';
    document.body.dataset.scrollY = window.scrollY;
    document.body.style.position = 'fixed';
    document.body.style.top = `-${window.scrollY}px`;
    document.body.style.left = '0';
    document.body.style.right = '0';
}

function enableBodyScroll() {
    const scrollY = document.body.dataset.scrollY;
    document.body.style.position = '';
    document.body.style.top = '';
    document.body.style.left = '';
    document.body.style.right = '';
    document.body.style.overflow = '';
    window.scrollTo(0, parseInt(scrollY || '0'));
}

// –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é closeAllModals (–¥–æ–±–∞–≤—å—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞)
function closeAllModals() {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        modal.style.display = 'none';
    });
    enableBodyScroll();
}

// –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Ñ–æ–Ω—É
    document.addEventListener('click', function(event) {
        if (event.target.classList.contains('modal')) {
            closeAllModals();
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Escape
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            closeAllModals();
        }
    });
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
    document.querySelectorAll('.modal-content').forEach(modalContent => {
        modalContent.addEventListener('click', function(event) {
            event.stopPropagation();
        });
    });
});